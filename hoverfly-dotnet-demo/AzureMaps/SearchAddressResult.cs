// <auto-generated /> https://app.quicktype.io/#l=cs&r=json2csharp
namespace hoverfly_dotnet_demo.AzureMaps
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    internal partial class SearchAddressResponse
    {
        [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
        internal Summary Summary { get; set; }

        [JsonProperty("results", NullValueHandling = NullValueHandling.Ignore)]
        internal List<Result> Results { get; set; }
    }

    internal partial class Result
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        internal string Type { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        internal string Id { get; set; }

        [JsonProperty("score", NullValueHandling = NullValueHandling.Ignore)]
        internal double? Score { get; set; }

        [JsonProperty("entityType", NullValueHandling = NullValueHandling.Ignore)]
        internal string EntityType { get; set; }

        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        internal Address Address { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        internal Position Position { get; set; }

        [JsonProperty("viewport", NullValueHandling = NullValueHandling.Ignore)]
        internal BoundingBox Viewport { get; set; }

        [JsonProperty("boundingBox", NullValueHandling = NullValueHandling.Ignore)]
        internal BoundingBox BoundingBox { get; set; }

        [JsonProperty("dataSources", NullValueHandling = NullValueHandling.Ignore)]
        internal DataSources DataSources { get; set; }
    }

    internal partial class Address
    {
        [JsonProperty("streetNumber", NullValueHandling = NullValueHandling.Ignore)]
        internal string StreetNumber { get; set; }

        [JsonProperty("streetName", NullValueHandling = NullValueHandling.Ignore)]
        internal string StreetName { get; set; }

        [JsonProperty("postalCode", NullValueHandling = NullValueHandling.Ignore)]
        internal string PostalCode { get; set; }

        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        internal string CountryCode { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        internal string Country { get; set; }

        [JsonProperty("countryCodeISO3", NullValueHandling = NullValueHandling.Ignore)]
        internal string CountryCodeIso3 { get; set; }

        [JsonProperty("freeformAddress", NullValueHandling = NullValueHandling.Ignore)]
        internal string FreeformAddress { get; set; }

        [JsonProperty("municipality", NullValueHandling = NullValueHandling.Ignore)]
        internal string Municipality { get; set; }

        [JsonProperty("countrySecondarySubdivision", NullValueHandling = NullValueHandling.Ignore)]
        internal string CountrySecondarySubdivision { get; set; }

        [JsonProperty("countrySubdivision", NullValueHandling = NullValueHandling.Ignore)]
        internal string CountrySubdivision { get; set; }

        [JsonProperty("countryTertiarySubdivision", NullValueHandling = NullValueHandling.Ignore)]
        internal string CountryTertiarySubdivision { get; set; }

        [JsonProperty("countrySubdivisionName", NullValueHandling = NullValueHandling.Ignore)]
        internal string CountrySubdivisionName { get; set; }

        [JsonProperty("municipalitySubdivision", NullValueHandling = NullValueHandling.Ignore)]
        internal string MunicipalitySubdivision { get; set; }
    }

    internal partial class BoundingBox
    {
        [JsonProperty("topLeftPoint", NullValueHandling = NullValueHandling.Ignore)]
        internal Position TopLeftPoint { get; set; }

        [JsonProperty("btmRightPoint", NullValueHandling = NullValueHandling.Ignore)]
        internal Position BtmRightPoint { get; set; }
    }

    internal partial class Position
    {
        [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
        internal double? Lat { get; set; }

        [JsonProperty("lon", NullValueHandling = NullValueHandling.Ignore)]
        internal double? Lon { get; set; }
    }

    internal partial class DataSources
    {
        [JsonProperty("geometry", NullValueHandling = NullValueHandling.Ignore)]
        internal Geometry Geometry { get; set; }
    }

    internal partial class Geometry
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        internal Guid? Id { get; set; }
    }

    internal partial class Summary
    {
        [JsonProperty("query", NullValueHandling = NullValueHandling.Ignore)]
        internal string Query { get; set; }

        [JsonProperty("queryType", NullValueHandling = NullValueHandling.Ignore)]
        internal string QueryType { get; set; }

        [JsonProperty("queryTime", NullValueHandling = NullValueHandling.Ignore)]
        internal long? QueryTime { get; set; }

        [JsonProperty("numResults", NullValueHandling = NullValueHandling.Ignore)]
        internal long? NumResults { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        internal long? Offset { get; set; }

        [JsonProperty("totalResults", NullValueHandling = NullValueHandling.Ignore)]
        internal long? TotalResults { get; set; }

        [JsonProperty("fuzzyLevel", NullValueHandling = NullValueHandling.Ignore)]
        internal long? FuzzyLevel { get; set; }
    }

    internal partial class SearchAddressResponse
    {
        internal static SearchAddressResponse FromJson(string json) => JsonConvert.DeserializeObject<SearchAddressResponse>(json, Converter.Settings);
    }

    internal static class Serialize
    {
        internal static string ToJson(this SearchAddressResponse self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        internal static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
